{"version":3,"sources":["components/formatted_date/formatted-date.component.jsx","components/message/message.component.jsx","components/message-list/message-list.component.jsx","components/ordering-buttons/ordering-buttons.component.jsx","ChatApp.js","serviceWorker.js","index.js"],"names":["FormattedDate","props","sentAt","date","Date","formattedDate","concat","getDay","getMonth","getFullYear","getHours","getMinutes","className","Message","message","onRemoveMessageClick","content","senderUuid","uuid","Table","bordered","responsive","alt","src","rowSpan","Button","variant","onClick","MessageList","messages","map","key","OrderingButtons","onOrderClick","ButtonGroup","aria-label","ChatApp","deduplicateMessages","filter","item","i","findIndex","ele","element","newMessages","state","setState","setPaginatedMessages","handlePageChange","offsets","offset","selected","start","end","paginatedMessages","orderMessages","slice","order","ordering","orderedMessages","sort","a","b","sortDescending","sortAscending","x","y","fetch","then","response","json","data","this","previousClassName","nextClassName","pageLinkClassName","pageRangeDisplayed","marginPagesDisplayed","initialPage","pageCount","Math","ceil","length","onPageChange","containerClassName","subContainerClassName","activeClassName","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.23320368.chunk.js","sourcesContent":["import React from 'react';\n\nimport './formatted-date.styles.css';\n\nconst FormattedDate = (props) => {\n  const { sentAt } = props;\n  const date = new Date(sentAt);\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const formattedDate = ''.concat(\n    days[date.getDay()],\n    ' ',\n    months[date.getMonth()],\n    ', ',\n    date.getFullYear(),\n    ' at ',\n    date.getHours(),\n    ':',\n    date.getMinutes(),\n  );\n  return (\n    <p className=\"date\">{ formattedDate }</p>\n  );\n};\n\nexport default FormattedDate;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Table from 'react-bootstrap/Table';\nimport FormattedDate from '../formatted_date/formatted-date.component';\n\nimport './message.styles.css';\n\nconst Message = (props) => {\n  const { message, onRemoveMessageClick } = props;\n  const {\n    sentAt,\n    content,\n    senderUuid,\n    uuid,\n  } = message;\n\n  return (\n    <div className=\"message\">\n      <Table bordered responsive>\n        <tbody>\n          <tr>\n            <td>\n              <img alt=\"uuid\" src={`https://robohash.org/${senderUuid}?set=set5&size=120x120`} />\n            </td>\n            <td className=\"data-row\">\n              <tr>\n                <h5 className=\"content\">{content}</h5>\n              </tr>\n              <tr>\n                <FormattedDate sentAt={sentAt} />\n              </tr>\n            </td>\n            <td rowSpan={2}>\n              <Button variant=\"primary\" onClick={() => onRemoveMessageClick({ uuid })}>Remove</Button>\n            </td>\n          </tr>\n        </tbody>\n      </Table>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from 'react';\nimport Message from '../message/message.component';\n\nimport './message-list.styles.css';\n\nconst MessageList = (props) => {\n  const { messages, onRemoveMessageClick } = props;\n  return (\n    <div className=\"message-list\">\n      {\n        messages.map((message) => (\n          <Message\n            key={message.uuid}\n            message={message}\n            onRemoveMessageClick={onRemoveMessageClick}\n          />\n        ))\n      }\n    </div>\n  );\n};\n\nexport default MessageList;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\n\nimport './ordering-buttons.styles.css';\n\nconst OrderingButtons = (props) => {\n  const { onOrderClick } = props;\n  return (\n    <div className=\"ordering-buttons\">\n      <ButtonGroup aria-label=\"Basic example\">\n        <Button variant=\"secondary\" onClick={() => onOrderClick('asc')}>Order Ascending</Button>\n        <Button variant=\"secondary\" onClick={() => onOrderClick('desc')}>Order Descending</Button>\n      </ButtonGroup>\n    </div>\n  );\n};\n\nexport default OrderingButtons;\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { Component } from 'react';\nimport './ChatApp.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactPaginate from 'react-paginate';\nimport MessageList from './components/message-list/message-list.component';\nimport OrderingButtons from './components/ordering-buttons/ordering-buttons.component';\n\nclass ChatApp extends Component {\n  constructor() {\n    super();\n    this.state = {\n      messages: [],\n      paginatedMessages: [],\n      offset: 1,\n      ordering: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://my-json-server.typicode.com/briverac/dummy-messages/data')\n      .then((response) => response.json())\n      .then((data) => this.setState({\n        messages: this.deduplicateMessages(data.messages),\n        paginatedMessages: data.messages.slice(0, 5),\n      }));\n  }\n\n  deduplicateMessages = (messages) => {\n    return messages.filter((item, i) => messages.findIndex((ele) => ele.uuid === item.uuid) === i);\n  }\n\n  onRemoveMessageClick = (element) => {\n    const { uuid } = element;\n    const { messages } = this.state;\n    const newMessages = messages.filter((item) => item.uuid !== uuid);\n    this.setState({ messages: newMessages }, () => this.setPaginatedMessages());\n  }\n\n  handlePageChange = (offsets) => {\n    const offset = offsets.selected;\n    this.setState({ offset }, () => this.setPaginatedMessages());\n  }\n\n  setPaginatedMessages = () => {\n    const { offset } = this.state;\n    const start = offset * 5;\n    const end = start + 5;\n    const orderedMessages = this.orderMessages();\n    const paginatedMessages = orderedMessages.slice(start, end);\n    this.setState({ paginatedMessages });\n  }\n\n  onOrderClick = (order) => {\n    this.setState({ ordering: order }, () => this.setPaginatedMessages());\n  }\n\n  orderMessages = () => {\n    const { messages, ordering } = this.state;\n    let orderedMessages = [];\n    switch (ordering) {\n      case 'desc':\n        orderedMessages = messages.sort((a, b) => this.sortDescending(a, b));\n        break;\n      case 'asc':\n        orderedMessages = messages.sort((a, b) => this.sortAscending(a, b));\n        break;\n      default:\n        orderedMessages = messages;\n    }\n    return orderedMessages;\n  }\n\n  sortDescending = (a, b) => {\n    const x = a.sentAt; const y = b.sentAt;\n    let order = 0;\n    if (x < y) {\n      order = -1;\n    } else if (x > y) {\n      order = 1;\n    }\n    return order;\n  }\n\n  sortAscending = (a, b) => {\n    const x = a.sentAt; const y = b.sentAt;\n    let order = 0;\n    if (x > y) {\n      order = -1;\n    } else if (x < y) {\n      order = 1;\n    }\n    return order;\n  }\n\n  render() {\n    const { paginatedMessages, messages } = this.state;\n    return (\n      <div className=\"ChatApp\">\n        <h1>Modern Health chat</h1>\n        <MessageList\n          messages={paginatedMessages}\n          onRemoveMessageClick={this.onRemoveMessageClick}\n        />\n        <div className=\"button-area\">\n          <ReactPaginate\n            previousClassName=\"btn btn-secondary\"\n            nextClassName=\"btn btn-secondary\"\n            pageLinkClassName=\"btn btn-secondary\"\n            pageRangeDisplayed={5}\n            marginPagesDisplayed={1}\n            initialPage={1}\n            pageCount={Math.ceil(messages.length / 5)}\n            onPageChange={this.handlePageChange}\n            containerClassName=\"pagination\"\n            subContainerClassName=\"pages pagination\"\n            activeClassName=\"active\"\n          />\n          <OrderingButtons onOrderClick={this.onOrderClick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChatApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ChatApp from './ChatApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<ChatApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}